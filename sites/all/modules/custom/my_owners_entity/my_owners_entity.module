<?php

function my_owners_entity_entity_info() {
  $my_owners_info['my_owners'] = array(
    'label' => t('my owners Note'),
    'controller class' => 'myOwnersEntityController',
    'base table' => 'my_owners',
    'uri callback' => 'my_owners_entity_uri',
    'fieldable' => TRUE,
    'entity keys' => array(
      'id' => 'pid',
    ),
    'bundles' => array(
      'my_owners' => array(
        'label' => 'my_owners',
        'admin' => array(
          'path' => 'admin/structure/my_owners/manage',
          'access arguments' => array('administer my_owners'),
        ),
      ),
    ),
    'view modes' => array(
      'full' => array(
        'label' => t('Full my_owners'),
        'custom settings' => FALSE,
      ),
    )
  );

  return $my_owners_info;
}

function my_owners_entity_uri($my_owner) {
  return array(
    'path' => 'my_owners/' . $my_owner->id,
  );
}

/**
 * Load entity.
 */
function my_owners_entity_load($pid = NULL, $reset = FALSE) {
  $pids = (isset ($pid) ? array($pid) : array());
  $my_owners = my_owners_entity_load_multiple($pids, $reset);
  return $my_owners ? reset ($my_owners) : FALSE;
}

/**
 * Load multiple entities.
 */
function my_owners_entity_load_multiple($pids = FALSE, $conditions = array(), $reset = FALSE) {
  return entity_load('my_owners', $pids, $conditions, $reset);
}

/**
 * Hook menu.
 */
function my_owners_entity_menu() {
  $items['admin/structure/my_owners/manage'] = array(
    'title' => 'my Owner Admin',
    'description' => 'Manage my_owners structure',
    'page callback' => 'my_owners_entity_list_entities',
    'access arguments' => array('access content'),
  );
  $items['my_owners'] = array(
    'title' => 'my Owners',
    'description' => 'Manage my_owners structure',
    'page callback' => 'my_owners_entity_info',
    'access arguments' => array('access content'),
  );
  // Return function my_owners_entity_load with argument.
  $items['my_owners/%my_owners_entity'] = array(
    'title callback' => 'my_owners_entity_page_title',
    'title arguments' => array(1),
    'page callback' => 'my_owners_entity_page_view',
    'page arguments' => array(1),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  $items['my_owners/add'] = array(
    'title' => t('Add pet owner!'),
    'page callback' => 'my_owners_entity_add',
    'access arguments' => array('access content'),
    // Create button in parent page.
    'type' => MENU_LOCAL_ACTION,
  );
  // 'View' tab for an individual entity page.
  $items['my_owners/%my_owners_entity/view'] = array(
    'title' => 'View',
    // Create menu "View" in parent page.
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );
  $items['my_owners/%my_owners_entity/edit'] = array(
    'title' => 'Edit',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('my_owners_entity_form', 1),
    'access arguments' => array('access content'),
    'type' => MENU_LOCAL_TASK,
  );

  $items['my_owners/%my_owners_entity/delete'] = array(
    'title' => 'Delete',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('my_owners_entity_delete_confirm', 1),
    'access arguments' => array('access content'),
   // 'type' => MENU_LOCAL_TASK,
  );

  return $items;
}

function my_owners_entity_info() {
  $content['preface'] = array(
    '#type' => 'item',
    '#markup' => t('The entity example provides a my owners entities.'),
  );
  if (user_access('access content')) {
    $content['preface']['#markup'] = t('You can administer these and add fields and change the view !link.',
      array('!link' => l(t('here'), 'admin/structure/my_owners/manage'))
    );
  }
  $content['table'] = my_owners_entity_list_entities();

  return $content;
}

/**
 * Return list of entities to the page.
 */
function my_owners_entity_list_entities() {
  $content = array();
  // Load all of our entities.
  $entities = my_owners_entity_load_multiple();
  if (!empty($entities)) {
    foreach ($entities as $entity) {
      // Create tabular rows for our entities.
      $delete_link = l(t('Delete'), "my_owners/{$entity->pid}/delete");
      $edit_link = l(t('Edit'), "my_owners/{$entity->pid}/edit");
      $rows[] = array(
        'data' => array(
          'id' => $entity->pid,
          'name' => l($entity->name, 'my_owners/' . $entity->pid),
          'actions' => $delete_link . '  ' . $edit_link,
        ),
      );
    }
    // Put our entities into a themed table. See theme_table() for details.
    $content['entity_table'] = array(
      '#theme' => 'table',
      '#rows' => $rows,
      '#header' => array(t('ID'), t('Name'), t('Action')),
    );
  }
  else {
    // There were no entities. Tell the user.
    $content[] = array(
      '#type' => 'item',
      '#markup' => t('No entities currently exist.'),
    );
  }
  return $content;

}

/**
 * Title for entity page.
 */
function my_owners_entity_page_title($my_owners_entity) {
  return 'Pet owner ' . $my_owners_entity->name . ' His Id is ' . $my_owners_entity->pid;
}

/**
 * Show some entity by id in entity page.
 */
function my_owners_entity_page_view($entity, $view_mode = 'full') {
  // Our entity type, for convenience.
  $entity_type = 'my_owners';
  // Start setting up the content.
  $entity->content = array(
    '#view_mode' => $view_mode,
  );
  // Build fields content - this is where the Field API really comes in to play.
  // The task has very little code here because it all gets taken care of by
  // field module.
  // field_attach_prepare_view() lets the fields load any data they need
  // before viewing.
  field_attach_prepare_view($entity_type, array($entity->pid => $entity),
    $view_mode);
  // We call entity_prepare_view() so it can invoke hook_entity_prepare_view()
  // for us.
  entity_prepare_view($entity_type, array($entity->pid => $entity));
  // Now field_attach_view() generates the content for the fields.
  $entity->content += field_attach_view($entity_type, $entity, $view_mode);
  // OK, Field API done, now we can set up some of our own data.
  $entity->content['name'] = array(
    '#type' => 'item',
    '#title' => t('Name'),
    '#markup' => $entity->name,
  );
  // Now to invoke some hooks. We need the language code for
  // hook_entity_view(), so let's get that.
  global $language;
  $langcode = $language->language;
  // And now invoke hook_entity_view().
  module_invoke_all('entity_view', $entity, $entity_type, $view_mode,
    $langcode);
  // Now invoke hook_entity_view_alter().
  drupal_alter(array('my_owners_entity_page_view', 'entity_view'),
    $entity->content, $entity_type);

  // And finally return the content.
  return $entity->content;
}

/**
 * Add Name from db to view (mandatory field).
 */
function my_owners_entity_field_extra_fields() {
  $form_elements['name'] = array(
    'label' => t('Owner Name'),
    'description' => t('Owner Name (an extra form field)'),
    'weight' => -5,
  );
  $display_elements['name'] = array(
    'label' => t('Owner Name'),
    'description' => t('Just like title, but trying to point out that it is a separate property'),
    'weight' => 0,
  );
  // Since we have only one bundle type, we'll just provide the extra_fields
  // for it here.
  $extra_fields['my_owners']['my_owners']['form'] = $form_elements;
  $extra_fields['my_owners']['my_owners']['display'] = $display_elements;

  return $extra_fields;
}

function my_owners_entity_add() {
  // Create a basic entity structure to be used and passed to the validation
  // and submission functions.
  $entity = entity_get_controller('my_owners')->create();
  return drupal_get_form('my_owners_entity_form', $entity);
}

function my_owners_entity_form($form, &$form_state, $entity) {
  $form['name'] = array(
    '#type' => 'textfield',
    '#title' => t('Name'),
    '#required' => TRUE,
    '#default_value' => $entity->name,
  );

  field_attach_form('my_owners', $entity, $form, $form_state);

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
    '#weight' => 100,
  );
  $form['delete'] = array(
    '#type' => 'submit',
    '#value' => t('Delete'),
    '#submit' => array('my_owners_entity_delete_submit'),
    '#weight' => 200,
  );
  $form['basic_entity'] = array(
    '#type' => 'value',
    '#value' => $entity,
  );

  return $form;
}

/**
 * Submit entity entry.
 */
function my_owners_entity_form_submit($form, &$form_state) {
  $entity = $form_state['values']['basic_entity'];
  $entity->name = $form_state['values']['name'];
  field_attach_submit('my_owners', $entity, $form, $form_state);
  my_owners_entity_save($entity);
  $form_state['redirect'] = 'my_owners';
}

/**
 * Make action when we click submit in "my_owners_delete_confirm" form (first part of name should be repeat from confirm form)
 *
 * @param $form_state
 */
function my_owners_entity_delete_confirm_submit($form, &$form_state) {
  $entity = $form_state['build_info']['args']['0'];
  my_owners_entity_delete($entity);
  drupal_set_message(t('The entity %name (ID %id) has been deleted',
      array('%name' => $entity->name, '%id' => $entity->pid))
  );
  $form_state['redirect'] = 'my_owners';
}

/**
 * Confirm form.
 *
 * @return mixed
 *    return form with question
 */
function my_owners_entity_delete_confirm($form, &$form_state) {
  $question = t('Are you sure you want to delete this my owners?');
  $path = 'my_owners';
  $description = t('This action cannot be undone.');
  $yes = t('Delete my owners');
  $no = t('Cancel');
  $confirm = confirm_form(array(), $question, $path, $description, $yes, $no);
  return $confirm;
}

/**
 * Redirect to 'my_owners/' . $entity->pid . '/delete'.
 */
function my_owners_entity_delete_submit($form, &$form_state) {
  $destination = array();
  // Check if there is destination.
  if (isset($_GET['destination'])) {
    $destination = drupal_get_destination();
    unset($_GET['destination']);

  }
  $entity = $form['#entity'];
  $form_state['redirect'] = array('my_owners/' . $entity->pid . '/delete', array('query' => $destination));
}

/**
 * Save entity entry.
 */
function my_owners_entity_save(&$entity) {
  return entity_get_controller('my_owners')->save($entity);
}

/**
 * Delete entity entry.
 */
function my_owners_entity_delete($entity) {
  entity_get_controller('my_owners')->delete($entity);
}


/**
 * Implementation of hook_ctools_plugin_api().
 *
 * Tell CTools that we support the default_mymodule_presets API.
 */
function my_owners_entity_ctools_plugin_api($owner, $api) {
  if ($owner == 'my_owners_entity' && $api == 'default_my_owners_entity_presets') {
    return array('version' => 1);
  }
}

/**
 * Implementation of hook_default_my_owners_entity_preset().
 *
 * Provide a couple of default presets.
 */
function my_owners_entity_default_my_owners_entity_preset() {
  $export = array();

  $preset = new stdClass;
  $preset->api_version = 1;
  $preset->name = 'my_default_preset';
  $preset->admin_title = 'Default preset';
  $preset->mydata = 'x';
  $export['my_default_preset'] = $preset;

  return $export;
}

/**
 * Implementation of hook_ctools_plugin_directory().
 */
function my_owners_entity_ctools_plugin_directory($module, $type) {

  // Load the export_ui plugin.
  if ($type =='export_ui') {
    return 'plugins/export_ui';
  }
}

/**
 * Interface myOwnersEntityControllerInterface.
 */
interface myOwnersEntityControllerInterface
  extends DrupalEntityControllerInterface {

  /**
   * Create an entity.
   */
  public function create();

  /**
   * Save an entity.
   *
   * @param object $entity
   *   The entity to save.
   */
  public function save($entity);

  /**
   * Delete an entity.
   *
   * @param object $entity
   *   The entity to delete.
   */
  public function delete($entity);

}

/**
 * myOwnersEntityController extends DrupalDefaultEntityController.
 *
 * Our subclass of DrupalDefaultEntityController lets us add a few
 * important create, update, and delete methods.
 */
class myOwnersEntityController
  extends DrupalDefaultEntityController
  implements myOwnersEntityControllerInterface {

  /**
   * Create and return a new entity_example_basic entity.
   */
  public function create() {
    $entity = new stdClass();
    $entity->type = 'my_owners';
    $entity->pid = 0;
    $entity->name = '';
    return $entity;
  }

  /**
   * Saves the custom fields using drupal_write_record().
   */
  public function save($entity) {
    // If our entity has no basic_id, then we need to give it a
    // time of creation.
    if (empty($entity->pid)) {
      $entity->created = time();
    }
    // Invoke hook_entity_presave().
    module_invoke_all('entity_presave', $entity, 'my_owners');
    // The 'primary_keys' argument determines whether this will be an insert
    // or an update. So if the entity already has an ID, we'll specify
    // basic_id as the key.
    $primary_keys = $entity->pid ? 'pid' : array();
    // Write out the entity record.
    drupal_write_record('my_owners', $entity, $primary_keys);
    // We're going to invoke either hook_entity_update() or
    // hook_entity_insert(), depending on whether or not this is a
    // new entity. We'll just store the name of hook_entity_insert()
    // and change it if we need to.
    $invocation = 'entity_insert';
    // Now we need to either insert or update the fields which are
    // attached to this entity. We use the same primary_keys logic
    // to determine whether to update or insert, and which hook we
    // need to invoke.
    if (empty($primary_keys)) {
      field_attach_insert('my_owners', $entity);
    }
    else {
      field_attach_update('my_owners', $entity);
      $invocation = 'entity_update';
    }
    // Invoke either hook_entity_update() or hook_entity_insert().
    module_invoke_all($invocation, $entity, 'my_owners');
    return $entity;
  }

  /**
   * Delete a single entity.
   *
   * Really a convenience function for deleteMultiple().
   */
  public function delete($entity) {
    $this->deleteMultiple(array($entity));
  }

/**
 * Delete one or more entities.
 * Deletion is unfortunately not supported in the base
 * DrupalDefaultEntityController class.
 *
 * @param array $entities
 *   An array of entity IDs or a single numeric ID.
 */
  public function deleteMultiple($entities) {
    $basic_ids = array();
    if (!empty($entities)) {
      $transaction = db_transaction();
      try {
        foreach ($entities as $entity) {
          // Invoke hook_entity_delete().
          module_invoke_all('entity_delete', $entity, 'my_owners');
          field_attach_delete('my_owners', $entity);
          $basic_ids[] = $entity->pid;
        }
        db_delete('my_owners')
          ->condition('pid', $basic_ids, 'IN')
          ->execute();
      }
      catch (Exception $e) {
        $transaction->rollback();
        watchdog_exception('my_owners', $e);
        throw $e;
      }
    }
  }
}
